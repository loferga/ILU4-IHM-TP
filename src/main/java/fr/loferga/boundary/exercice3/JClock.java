/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package fr.loferga.boundary.exercice3;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.time.LocalDateTime;
import java.util.function.Supplier;

/**
 *
 * @author LFM4179A
 */
public class JClock extends javax.swing.JPanel implements TimeModelListener {

    private LocalDateTime time;
    
    /**
     * Creates new form JClock
     */
    public JClock() {
        initComponents();
        time = LocalDateTime.now();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    //retourne le degré de rotation d'une seconde sur l'horloge
    private int getSecondsRotation(int seconds) {
        return(360/60)*seconds;
    }
    //retourne le degré de rotation d'une minute sur l'horloge
    private int getMinuteRotation(int minutes) {
        return(360/60)*minutes;
    }
    //retourne le degré de rotation d'une heure sur l'horloge
    private int getHourRotation(int hours) {
        return(360/12)*hours;
    }
    // retourne un point qui a été tourné autour du centre selon le degré
    private Point rotatePoint(Point point, Point center, int degree) {
        AffineTransform rotation = new AffineTransform();
        double angleInRadians = (degree*Math.PI/180);
        rotation.rotate(angleInRadians, center.getX(), center.getY());
        Point result = new Point();
        rotation.transform(point, result);
        return result;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        // draw Clock
        drawBackground(g);
        drawTicks(g);
        drawHour(g2d);
    }
    
    private final Supplier<Point> TWELVE_O_CLOCK = () -> new Point(20, super.getWidth()/2);
    private final Supplier<Point> CENTER = () -> new Point(super.getHeight()/2, super.getWidth()/2);
    
    private void drawBackground(Graphics g) {
        g.setColor(Color.LIGHT_GRAY);
        g.fillOval(0, 0, super.getWidth(), super.getWidth());
    }
    
    private void drawTicks(Graphics g) {
        g.setColor(Color.BLACK);
        int hourInterval = 360/12;
        Point center = CENTER.get();
        Point currentPoint = TWELVE_O_CLOCK.get();
        for (int i=0; i<12; i++) {
            g.fillOval(currentPoint.x-4, currentPoint.y-4, 8, 8);
            currentPoint = rotatePoint(currentPoint, center, hourInterval);
        }
    }
    
    private void drawHour(Graphics2D g) {
        g.setColor(Color.BLACK);
        Point center = CENTER.get();
        Point hour = rotatePoint(TWELVE_O_CLOCK.get(), center, getHourRotation(time.getHour()));
        g.setStroke(new BasicStroke(4));
        g.drawLine(center.x, center.y, hour.x, hour.y);
    }
    
    private void drawMinute(Graphics2D g) {
        g.setColor(Color.BLACK);
        Point center = CENTER.get();
        Point refference = TWELVE_O_CLOCK.get();
        // refference.x -= 50;
        Point minute = rotatePoint(refference, center, getMinuteRotation(time.getMinute()));
        g.setStroke(new BasicStroke(6));
        g.drawLine(center.x, center.y, minute.x, minute.y);
    }
    
    private void drawSecond(Graphics2D g) {
        
    }
    
    @Override
    public void timeChanged(TimeModelEvent evt) {
        time = evt.getTime();
        repaint();
        System.out.println("TEST!!!");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
