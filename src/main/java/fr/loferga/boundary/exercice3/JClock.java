/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package fr.loferga.boundary.exercice3;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.time.LocalDateTime;
import java.util.function.Supplier;

/**
 *
 * @author LFM4179A
 */
public class JClock extends javax.swing.JPanel implements TimeModelListener {

    private LocalDateTime time;
    
    /**
     * Creates new form JClock
     */
    public JClock() {
        initComponents();
        time = LocalDateTime.now();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    //retourne le degré de rotation d'une seconde sur l'horloge
    private int getSecondsRotation(int seconds) {
        return(360/60)*seconds;
    }
    //retourne le degré de rotation d'une minute sur l'horloge
    private int getMinuteRotation(int minutes) {
        return(360/60)*minutes;
    }
    //retourne le degré de rotation d'une heure sur l'horloge
    private int getHourRotation(int hours) {
        return(360/12)*hours;
    }
    // retourne un point qui a été tourné autour du centre selon le degré
    private Point rotatePoint(Point point, Point center, int degree) {
        AffineTransform rotation = new AffineTransform();
        double angleInRadians = (degree*Math.PI/180);
        rotation.rotate(angleInRadians, center.getX(), center.getY());
        Point result = new Point();
        rotation.transform(point, result);
        return result;
    }
    
    private final Supplier<Integer> CLOCK_SIZE = () -> Math.min(super.getWidth(), super.getHeight());
    private final Supplier<Point> TWELVE_O_CLOCK = () -> new Point(CLOCK_SIZE.get()/2, super.getHeight()/20);
    private final Supplier<Point> CENTER = () -> new Point(CLOCK_SIZE.get()/2, CLOCK_SIZE.get()/2);
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Point center = CENTER.get();
        Graphics2D g2d = (Graphics2D) g;
        // draw Clock
        drawBackground(g);
        drawTicks(g, center);
        drawSecond(g2d, center);
        drawMinute(g2d, center);
        drawHour(g2d, center);
        drawDot(g, center);
    }
    
    private void drawBackground(Graphics g) {
        g.setColor(Color.LIGHT_GRAY);
        int clockSize = CLOCK_SIZE.get();
        g.fillOval(0, 0, clockSize, clockSize);
    }
    
    private void drawTicks(Graphics g, Point center) {
        g.setColor(Color.BLACK);
        int hourInterval = 360/12;
        int ticksSize = CLOCK_SIZE.get()/50;
        Point currentPoint = TWELVE_O_CLOCK.get();
        for (int i=0; i<12; i++) {
            g.fillOval(currentPoint.x-ticksSize/2, currentPoint.y-ticksSize/2, ticksSize, ticksSize);
            currentPoint = rotatePoint(currentPoint, center, hourInterval);
        }
    }
    
    private void drawSecond(Graphics2D g, Point center) {
        g.setColor(Color.RED);
        Point referencePoint = TWELVE_O_CLOCK.get();
        Point minute = rotatePoint(referencePoint, center, getSecondsRotation(time.getSecond()));
        g.setStroke(new BasicStroke(CLOCK_SIZE.get()/80));
        g.drawLine(center.x, center.y, minute.x, minute.y);
    }
    
    private void drawMinute(Graphics2D g, Point center) {
        g.setColor(Color.BLACK);
        int clockSize = CLOCK_SIZE.get();
        Point referencePoint = new Point(center.x, TWELVE_O_CLOCK.get().y + (clockSize/6));
        Point minute = rotatePoint(referencePoint, center, getMinuteRotation(time.getMinute()));
        g.setStroke(new BasicStroke(clockSize/40));
        g.drawLine(center.x, center.y, minute.x, minute.y);
    }
    
    private void drawHour(Graphics2D g, Point center) {
        g.setColor(Color.BLACK);
        Point referencePoint = TWELVE_O_CLOCK.get();
        Point hour = rotatePoint(referencePoint, center, getHourRotation(time.getHour()));
        g.setStroke(new BasicStroke(CLOCK_SIZE.get()/60));
        g.drawLine(center.x, center.y, hour.x, hour.y);
    }
    
    private void drawDot(Graphics g, Point center) {
        g.setColor(Color.ORANGE);
        int dotSize = CLOCK_SIZE.get()/15;
        g.fillOval(center.x - dotSize/2, center.y - dotSize/2, dotSize, dotSize);
    }
    
    @Override
    public void timeChanged(TimeModelEvent evt) {
        time = evt.getTime();
        super.repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
